options {
    OUTPUT_DIRECTORY="project6";
    //BUILD_PARSER=false;
    IGNORE_CASE=false;
   // LOOKAHEAD=1;
   //test
}

PARSER_BEGIN(Proj6)
package project6;

import java.io.*;

public class Proj6
{
  public static void main(String[] args) throws java.io.FileNotFoundException
    {
        java.io.FileReader fr = new java.io.FileReader(args[0]);
        SimpleCharStream scs = new SimpleCharStream(fr);
        Proj6TokenManager mgr = new Proj6TokenManager(scs);

        while (mgr.getNextToken().kind != EOF) {}
   }
}

/**HERE IS CHANGE*/
PARSER_END(Proj6)


TOKEN_MGR_DECLS :

 {
   /**
    public static void main(String[] args) throws java.io.FileNotFoundException
    {
        java.io.FileReader fr = new java.io.FileReader(args[0]);
        SimpleCharStream scs = new SimpleCharStream(fr);
        Proj6TokenManager mgr = new Proj6TokenManager(scs);

        while (mgr.getNextToken().kind != EOF) {}
    }
    */
}





SKIP :
{
    <IGNORE : [" ", ",", "\r", "\n"]>     
}


TOKEN:
{
        <"/*">: INSIDE_COMMENT
}

<INSIDE_COMMENT>
TOKEN:
{
        <"*/"  > :DEFAULT
        
|       <~[]>
}

TOKEN : {
  < SGL_COMMENT : "//" (< LETTER > | < DIGIT > | < SPECIAL_SYMBOL > | "_" | " ")* ("\n" | "\r")>
  | < COMMENT : "/*" (< LETTER > | < DIGIT > | < SPECIAL_SYMBOL > | "_" | " " )* "*/" >


  

  | < MULT_COMMENT: "/*" ~[] "*/">
  | < RESERVED : "auto" | "_Bool" | "break" | "case" | "char" | "_Complex" | "const"
               | "continue" | "default" | "do" | "double" | "else" | "enum" | "extern"
               | "float" | "for" | "goto" | "if" | "_Imaginary" | "inline" | "int" | "long"
               | "register" | "restrict" | "return" | "short" | "signed" | "sizeof" | "static"
               | "struct" | "switch" | "typedef" | "union" | "unsigned" | "void" | "volatile" | "while">
      { debugStream.println("RESERVED token: " + matchedToken.image); }
  | < STRING : "\"" ( ~["\""] )* "\""  >
      { debugStream.println("STRING: " + matchedToken.image); } 
  | < SPECIAL_SYMBOL :  < SPEC > | "\"" >
      { debugStream.println("Special Symbol: " + matchedToken.image); }
  | < INTEGER : (< DECIMAL > | < OCTAL > | < HEXIDECIMAL >) >
        { debugStream.println("INTEGER: " + matchedToken.image); }
  | < REAL : (< NODEC > | < NOEXP > | < BOTH >)>
        { debugStream.println("REAL: " + matchedToken.image); }
  | < CHAR : ("'" (< LETTER > | "\\") "'") >
        { debugStream.println("CHAR: " + matchedToken.image); }
  | < IDENTIFIER : < LETTER > ( < LETTER > | < DIGIT > | "_")* >
      { debugStream.println("Identifier: " + matchedToken.image); }
  | < #UPPER : ["A"-"Z"] >
  |  <DIGITS : (["0"-"9"])+>
  | < #LOWER : ["a"-"z"] >
  | < #LETTER : (< UPPER > | < LOWER >) > 
  | < DIGIT : ["0"-"9"] >
  | < #DECIMAL : ["1"-"9"] (< DIGIT >)* >
  | < #OCTAL : "0" (["0"-"7"])* >
  | < #HEXIDECIMAL : ("0x" | "0X") (["0"-"9"] | ["A"-"F"] | ["a"-"f"])+ >
  | < #NODEC : (< INTEGER > ("e" | "E") ("+" | "-")? < INTEGER >) >
  | < #NOEXP : (< INTEGER > "." < INTEGER >) >
  | < #BOTH : (< INTEGER > "." < INTEGER > ("e" | "E") ("+" | "-")? < INTEGER >) >
  | < #SPEC : "~" | "!" | "@" | "%" | "^" | "&" | "-" | "+" | "=" | "|" | "/" | ":" | ";" | "*"
            | "?" | "<" | ">" | "." | "," | "'" | "(" | ")" | "[" | "]" | "}" | "{" | "++" | "--"
            | "<<" | ">>" | "<=" | ">=" | "+=" | "-=" | "*= /=" | "==" | "|=" | "%=" | "&=" | "^="
            | "||" | "&&" | "!=" | "<<=" | ">>="| "#" >

        
}

void Assignment() : {} 
{
  {System.out.println("EXPRESSION STARTS");}
  <IDENTIFIER>
  //"=" {jjtThis.setImage(t.image);}
  //Number()
  //";"
  
}


void Operand() : {Token t;} 
{
  t=<INTEGER> {System.out.println("Operand\n\n\n: " + t.image+"\n\n\n");}
}

void Number() : {Token t;}
{
   {System.out.println("EXPRESSION STARTS");}
t=<INTEGER> | <REAL> 
}
