options {
    OUTPUT_DIRECTORY="project6";
    //BUILD_PARSER=false;
    IGNORE_CASE=false;
   // LOOKAHEAD=1;
   //test
}

PARSER_BEGIN(Proj6)
package project6;

import java.io.*;

public class Proj6
{
  public static void main(String[] args) throws java.io.FileNotFoundException
    {
        java.io.FileReader fr = new java.io.FileReader(args[0]);
        SimpleCharStream scs = new SimpleCharStream(fr);
        Proj6TokenManager mgr = new Proj6TokenManager(scs);
        

        while (mgr.getNextToken().kind != EOF)
         {
           
           try
            {
           		Proj6.Assignment();
			}
			catch (Exception e)
			{
			}
           

         }
   }
}

/**HERE IS CHANGE*/
PARSER_END(Proj6)


TOKEN_MGR_DECLS :

 {
   /**
    public static void main(String[] args) throws java.io.FileNotFoundException
    {
        java.io.FileReader fr = new java.io.FileReader(args[0]);
        SimpleCharStream scs = new SimpleCharStream(fr);
        Proj6TokenManager mgr = new Proj6TokenManager(scs);

        while (mgr.getNextToken().kind != EOF) {}
    }
    */
}





SKIP :
{
    <IGNORE : [" ", ",", "\r", "\n" ]>
    | "#" : PREPROCESSOR_OUTPUT
    | <"//" (~["\n"])* "\n"|"\r"> //Single line comments
}

<PREPROCESSOR_OUTPUT> SKIP:
{
     "\n" : DEFAULT
}

<PREPROCESSOR_OUTPUT> MORE:
{
 	"\\\n"
	 |
 	"\\\r\n"
 	|
	 < ~[] >
}
    





TOKEN:
{
        <"/*">: INSIDE_COMMENT
}

<INSIDE_COMMENT>
TOKEN:
{
        <"*/"  > :DEFAULT
        
|       <~[]>
}

TOKEN : {
 	<ASSIGNMENT_STATEMENT : < IDENTIFIER > <SPEC_EQUALS> (< EXPRESSION > | < INTEGER >| < REAL > ) +";">
	  { debugStream.println("ASSIGNMENT STATEMENT: " + matchedToken.image); }
	| 
	< EXPRESSION : (<INTEGER >|<REAL>) (< MATH_SYMBOL > (< INTEGER >|< REAL>))+  (";") >
	 { debugStream.println("EXPRESSION: " + matchedToken.image); }
  |  
    < MULT_COMMENT: "/*" ~[] "*/">
  | < MATH_SYMBOL : "+" | "-" | "*" | "//" >
  | < RESERVED : "auto" | "_Bool" | "break" | "case" | "char" | "_Complex" | "const"
               | "continue" | "default" | "do" | "double" | "else" | "enum" | "extern"
               | "float" | "for" | "goto" | "if" | "_Imaginary" | "inline" | "int" | "long"
               | "register" | "restrict" | "return" | "short" | "signed" | "sizeof" | "static"
               | "struct" | "switch" | "typedef" | "union" | "unsigned" | "void" | "volatile" | "while">
      { debugStream.println("RESERVED token: " + matchedToken.image); }
  | < STRING : "\"" ( ~["\""] )* "\""  >
      { debugStream.println("STRING: " + matchedToken.image); } 
  | < INTEGER : (< DECIMAL > | < OCTAL > | < HEXIDECIMAL >) >
        { debugStream.println("INTEGER: " + matchedToken.image); }
  | < REAL : (< NODEC > | < NOEXP > | < BOTH >)>
        { debugStream.println("REAL: " + matchedToken.image); }
  | < CHAR : ("'" (< LETTER > | "\\") "'") >
        { debugStream.println("CHAR: " + matchedToken.image); }
  | < IDENTIFIER : < LETTER > ( < LETTER > | < DIGIT > | "_")* >
      { debugStream.println("Identifier: " + matchedToken.image); }
  | < #UPPER : ["A"-"Z"] >
  |  <DIGITS : (["0"-"9"])+>
  | < #LOWER : ["a"-"z"] >
  | < #LETTER : (< UPPER > | < LOWER >) > 
  | < DIGIT : ["0"-"9"] >
  | < #DECIMAL : ["1"-"9"] (< DIGIT >)* >
  | < #OCTAL : "0" (["0"-"7"])* >
  | < #HEXIDECIMAL : ("0x" | "0X") (["0"-"9"] | ["A"-"F"] | ["a"-"f"])+ >
  | < #NODEC : (< INTEGER > ("e" | "E") ("+" | "-")? < INTEGER >) >
  | < #NOEXP : (< INTEGER > "." < INTEGER >) >
  | < #BOTH : (< INTEGER > "." < INTEGER > ("e" | "E") ("+" | "-")? < INTEGER >) >
  
  | <SPEC_CYDILLA : "~" >
  | <SPEC_EXCLAMATION : "!" >
  | <SPEC_AT : "@" >
  | <SPEC_PERCENT : "%" >
  | <SPEC_CARROT : "^" >
  | <SPEC_AMPERSAND : "&" >
  | <SPEC_MINUS : "-" >
  | <SPEC_PLUS :"+" >
  | <SPEC_EQUALS : "=" >
  | < SPEC_BAR : "|" >
  | <SPEC_SLASH: "/" >
  | <SPEC_COLON: ":" >
  | <SPEC_SEMICOLON : ";" >
  | <SPEC_ASTERIX: "*" >
  | <SPEC_QUESTION: "?" >
  | <SPEC_LESSTHAN: "<" >
  | <SPEC_GREATERTHAN: ">" >
  | < SPEC_DOT: "." >
  | < SPEC_COMMA: "," >
  | < SPEC_SQUOTE: "'" >
  | < SPEC_LPAREN: "(" >
  | < SPEC_RPAREN: ")" >
  | < SPEC_LBRACKET: "[" >
  | < SPEC_RBRACKET: "]" >
  | < SPEC_lCURLY: "{" >
  | < SPEC_RCURLY: "}" >
  | < SPEC_DOUBLEPLUS: "++" >
  | < SPEC_DOUBLEMINUS: "--" >
  | < SPEC_SHIFTLEFT: "<<" >
  | < SPEC_SHIFTRIGHT: " >>" >
  | < SPEC_lOE: "<=" >
  | < SPEC_GOE: ">=" >
  | < SPEC_PLUSEQUALS: "+=" >
  | < SPEC_MINUSEQUALS: "-=" >
  | < SPEC_MULTEQUALS: "*=" >
  | < SPEC_DIVIDEEQUALS: "/=" >
  | < SPEC_EQUALEQUALS: "==" >
  | < SPEC_BAREQUALS: "|=" >
  | < SPEC_PERCENTEQUALS: "%=" >
  | < SPEC_AMPERSANDEQUALS: "&=" >
  | < SPEC_CARROTEQUALS: "^=" >
  | < SPEC_OREQUALS: "||" >
  | < SPEC_ANDEQUALS: "&&" >
  | < SPEC_NOTEQUAL: "!=" >
  | < SPEC_SHIFTLEFTEQUALS: "<<=" >
  | < SPEC_SHIFTRIGHTEQUALS: ">>=" >
  //| < SPEC_POUND: "#" >
  | < SPEC_QUOTE: "\"" >
  




        /**| < #SPEC : //"~" | "!" | "@" | "%" | "^" | "&" | "-" | "+" | "=" | "|" | "/" | ":" | ";" | "*"
            |// "?" | "<" | ">" | "." | "," | "'" | "(" | ")" | "[" | "]" | "}" | "{" | "++" | "--"
            | "<<" | ">>" | "<=" | ">=" | "+=" | "-=" | "*= /=" | "==" | "|=" | "%=" | "&=" | "^="
            | "||" | "&&" | "!=" | "<<=" | ">>="| "#" > **/

		/**| < SPECIAL_SYMBOL :  < SPEC > | "\"" >
      		{ debugStream.println("Special Symbol: " + matchedToken.image); }*/
}

void Assignment() : {} 
{
 Number() ("+" Number())*
    { System.out.println("Parsed expression"); }
  
  
}





void Operand() : {Token t;} 
{
  t=<INTEGER> {System.out.println("Operand\n\n\n: " + t.image+"\n\n\n");}
}

void Number() : {}
{
	
	<DIGIT>
	 
}
